//Store information of a student using structure
#include<stdio.h>
struct name{
char name[50];
int roll;
float marks;
} s;
int main()
{
    printf("Enter information:");
    printf("\nEnter name: ");
    fgets(s.name,sizeof(s.name),stdin);
    
    printf("Enter roll number: ");
    scanf("%d",&s.roll);
    printf("Enter marks: ");
    scanf("%f",&s.marks);
    
    printf("Displaying information: ");
    printf("\nName: %s",s.name);
    printf("Roll: %d",s.roll);
    printf("\nMarks: %.1f",s.marks);
}

//Store information of a 10 students using structure
#include <stdio.h>
struct student {
    char firstName[50];
    int roll;
    float marks;
} s[10];

int main() {
    int i;
    printf("Enter information of students:\n");

    // storing information
    for (i = 0; i <=10; ++i) {
        s[i].roll = i + 1;
        printf("\nFor roll number%d,\n", s[i].roll);
        printf("Enter first name: ");
        scanf("%s", s[i].firstName);
        printf("Enter marks: ");
        scanf("%f", &s[i].marks);
    }
    printf("Displaying Information:\n\n");

    // displaying information
    for (i = 0; i <=10; ++i) {
        printf("\nRoll number: %d\n", i + 1);
        printf("First name: ",s[i].firstName);
        printf("Marks: %.1f\n", s[i].marks);
    }
    return 0;
}



//Add two complex numbers by passing structures to a function
#include <stdio.h>
typedef struct complex {
    float real;
    float imag;
} complex;

complex add(complex n1, complex n2);

int main() {
    complex n1, n2, result;

    printf("For 1st complex number \n");
    printf("Enter the real and imaginary parts: ");
    scanf("%f %f", &n1.real, &n1.imag);
    printf("\nFor 2nd complex number \n");
    printf("Enter the real and imaginary parts: ");
    scanf("%f %f", &n2.real, &n2.imag);

    result = add(n1, n2);

    printf("Sum = %.1f + %.1fi", result.real, result.imag);
    return 0;
}

complex add(complex n1, complex n2) {
    complex temp;
    temp.real = n1.real + n2.real;
    temp.imag = n1.imag + n2.imag;
    return (temp);
}


//Store Employee information using nested structure
#include <stdio.h>
 
/*structure declaration*/
struct employee{
    char    name[30];
    int     empId;
    float   salary;
};
 
int main()
{
    /*declare structure variable*/
    struct employee emp;
     
    /*read employee details*/
    printf("\nEnter details :\n");
    printf("Name ?:");          gets(emp.name);
    printf("ID ?:");            scanf("%d",&emp.empId);
    printf("Salary ?:");        scanf("%f",&emp.salary);
     
    /*print employee details*/
    printf("\nEntered detail is:");
    printf("Name: %s"   ,emp.name);
    printf("Id: %d"     ,emp.empId);
    printf("Salary: %f\n",emp.salary);
    return 0;
}

//C program to read a file and display its contents
#include <stdio.h>
#include <stdlib.h>
int main()
{
    FILE * fPtr;
    char ch;
    fPtr = fopen("data/file1.txt", "r");
    if(fPtr == NULL)
    {
        printf("Unable to open file.\n");
        printf("Please check whether file exists and you have read privilege.\n");
        exit(EXIT_FAILURE);
    }
    printf("File opened successfully. Reading file contents character by character. \n\n");
    do 
    {
        ch = fgetc(fPtr);
        putchar(ch);
    } while(ch != EOF);
    fclose(fPtr);
    return 0;
}

//C program to write even, odd and prime numbers to separate file
#include <stdio.h>
#include <stdlib.h>
int isEven(const int NUM);
int isPrime(const int NUM);
int main()
{
    FILE * fPtrIn,
         * fPtrEven, 
         * fPtrOdd, 
         * fPtrPrime;
    int num, success;
    fPtrIn   = fopen("data/numbers.txt", "r");
    fPtrEven = fopen("data/even-numbers.txt" , "w");
    fPtrOdd  = fopen("data/odd-numbers.txt"  , "w");
    fPtrPrime= fopen("data/prime-numbers.txt", "w");
    if(fPtrIn == NULL || fPtrEven == NULL || fPtrOdd == NULL || fPtrPrime == NULL)
    {
        printf("Unable to open file.\n");
        printf("Please check whether file exists and you have read/write privilege.\n");
        exit(EXIT_FAILURE);
    }
    printf("File opened successfully. Reading integers from file. \n\n");
    while (fscanf(fPtrIn, "%d", &num) != -1)
    {
        if (isPrime(num))
            fprintf(fPtrPrime, "%d\n", num);
        else if (isEven(num))
            fprintf(fPtrEven, "%d\n", num);
        else
            fprintf(fPtrOdd, "%d\n", num);

    }
    fclose(fPtrIn);
    fclose(fPtrEven);
    fclose(fPtrOdd);
    fclose(fPtrPrime);

    printf("Data written to files successfully.");
    return 0;
}
int isEven(const int NUM)
{
    return !(NUM & 1);
}
int isPrime(const int NUM)
{
    int i;  

    if (NUM < 0)
        return 0;
      
    for ( i=2; i<=NUM/2; i++ )    
    {    
        if (NUM % i == 0)    
        {  
            return 0;  
        }    
    }   
      
    return 1;  


//#include <stdio.h>
#include <stdlib.h>
int main()
{
    FILE * file;
    char path[100];
    char ch;
    int characters, words, lines;
    printf("Enter source file path: ");
    scanf("%s", path);
    file = fopen(path, "r");
    if (file == NULL)
    {
        printf("\nUnable to open file.\n");
        printf("Please check if file exists and you have read privilege.\n");
        exit(EXIT_FAILURE);
    }
    characters = words = lines = 0;
    while ((ch = fgetc(file)) != EOF)
    {
        characters++;
        if (ch == '\n' || ch == '\0')
            lines++;
        if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\0')
            words++;
    }
    if (characters > 0)
    {
        words++;
        lines++;
    }
    printf("\n");
    printf("Total characters = %d\n", characters);
    printf("Total words      = %d\n", words);
    printf("Total lines      = %d\n", lines);
    fclose(file);

    return 0;
}}