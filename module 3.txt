Odd and even
#include <stdio.h>
int eno(int i, int j){
printf("EVN NUMBERS -> ");
for (int s=i;s<=j;s++){
if (s%2==0)
printf("%d ",s);
}
printf("\n");
printf("ODD NUMBERS -> ");
for (int k=i;k<=j;k++){
if (k%2!=0)
printf("%d ",k);
}
printf("\n");
}
int main(){
eno(1,10);
}
Factorial using recursion
#include <stdio.h>
int fact(int n){
if (n==0){
return 1;
}
else if (n==1){
return 1;
}
else {
return n * fact(n-1);
}
}
int main(){
int n; printf("Enter a number to get its factorial - "); scanf("%d",&n);
int k= fact(n);
printf("%d",k);
}
Fibonacci using recursion
#include <stdio.h>
int fibo(int r){
if (r==0){
return n1;
}
else if (r==1){
return 1;
}
else {
return fibo(r-1)+fibo(r-2);
}
}
int main(){
int a,b; printf("Enter the number of outputs you want : "); scanf("%d",&b);
for (a=0;a<=b;a++){
printf("%d ",fibo(a));
}
}
Power of a number
#include <stdio.h>
#include <math.h>
int power(int bn, int exp){
int pn;
pn=pow(bn,exp);
printf("%d(th) power of %d is %d",exp,bn,pn);
return(0);
}
int main(void){
int bn,exp;
printf("Enter base number and exponent here -> ");
scanf("%d %d",&bn,&exp);
power(bn,exp);
}
Call by value and call by reference
#include <stdio.h>
int sum1(int *i, int *j){
printf("%d is the sum of %d and %d",*i+*j,*i,*j);
}
int sum2(int k, int l){
printf("%d is the sum of %d and %d",k+l,k,l);
}
int main(){
int a=10,b=20;
//call by reference
sum1(&a,&b);
printf("\n\n");
//call by value
sum2(a,b);
}
GCD using recursion
#include <stdio.h>
int gcd(int a, int b){
if (b == 0)
return a;
return gcd(b, a % b);
}
int main(){
int k = gcd(18,24);
printf("%d",k);
}
Max of two
#include <stdio.h>
int maxoftwo(int a, int b){
if (a>b){
printf("%d is greater than %d",a,b);
}
else{
printf("%d is greater than %d",b,a);
}
}
int main(){
int i,j;
printf("Enter two numbers to compare :- ");
scanf("%d %d",&i,&j);
maxoftwo(i,j);
}
Power of a number using recursion
#include <stdio.h>
int main() {
int b, a, res;
printf("Enter number: ");
scanf("%d", &b);
printf("Enter power : ");
scanf("%d", &a);
res = power(b, a);
printf("%d^%d = %d", b, a, res);
return 0;
}
int power(int b, int a){
if (a!=0)
return b*power(b,a-1);
else
return 1;
}
Prime - armstrong or perfect number
#include <stdio.h>
int isprime(int i){
int p[4]={2,3,5,7},k,s;
for (k=0;k<=4;k++){
if (i%p[k]!=0){
s = 0;
} else if(i==p[k]){
s = 0;
break;
} else{
s = 1;
break;
}
}
if (s==0){
printf("Number %d is prime.",i);
} else{
printf("Number %d is not a prime number.",i);
}
}
int armstrong(int num){
int i,j,sum,temp;
temp=num;
while(temp>=1){
i=temp%10;
j=i*i*i;
sum+=j;
temp=temp/10;
}
if (sum==num){
printf("Number %d is armstrong.",num);
}
else{
printf("Number %d is not armstrong",num);
}
}
int perfnum(int n){
int b,a=0;
if (n%2==0){
for (b=n/2;b>=1;b--){
if (n%b==0){
a+=b;
}
}
}
if (n==a){
printf("%d is a perfect number.",n);
}
else{
printf("%d is not a perfect number.",n);
}
}
int main(){
int inputnum;
printf("Enter a number -> "); scanf("%d",&inputnum);
isprime(inputnum); printf("\n");
armstrong(inputnum); printf("\n");
perfnum(inputnum); printf("\n");
}
Product of two numbers using recursion
#include <stdio.h>
int product(int a, int b){
if (a<b){
return product(b,a);
}
else if (b!=0){
return (a+product(a,b-1)); /*recursion takes place here. for example let a=4 and b=5. here
this process gets executed
5 times*/
}
else{
return (0);
}
}
int main(){
int i,j; printf("enter two numbers to get their product : "); scanf("%d %d",&i,&j);
int k=product(i,j);
printf("%d",k);
}
Strong number
#include <stdio.h>
int fact(int n){
int a=1, b;
for(b=1;b<=n;b++) {
a*=b;
}
return a;
}
int individual(int n){
int i,j=0,k=0;
for (i=0;i<=n;i++){
j=n%10;
n=n/10;
k+=fact(j);
if (n==1){
k+=1;
}
}
return(k);
}
int main(void){
int s,e,i;
printf("Enter start and end --> ");
scanf("%d %d", &s, &e);
printf("Strong numbers in range (%d , %d) are :- ",s,e);
for (i=s;i<=e;i++){
if (i==individual(i)){
printf("%d ",i);
}
}
}